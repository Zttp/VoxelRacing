extends Node3D

var current_car: VehicleBody3D
var is_test_active: bool = false
var start_time: float
var total_score: int = 0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ü–µ–Ω–∫–∏
const MAX_TIME = 120.0  # –°–µ–∫—É–Ω–¥
const SPEED_MULTIPLIER = 50
const STYLE_MULTIPLIER = 100

func _ready():
    spawn_random_car()
    start_test()

func spawn_random_car():
    var cars = GameState.get_unlocked_cars()  # –ú–∞—Å—Å–∏–≤ –∏–º—ë–Ω –º–∞—à–∏–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
    var random_car = cars[randi() % cars.size()]
    var car_scene = load("res://cars/%s.tscn" % random_car)
    current_car = car_scene.instantiate()
    CarSpawnPoint.add_child(current_car)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
    $CameraRig.spring_arm_length = current_car.mass * 0.5
    $CameraRig.spring_arm_top_level = true

func start_test():
    is_test_active = true
    start_time = Time.get_ticks_msec()
    $UI/CommentaryLabel.text = get_random_comment("start")
    $UI/TimerLabel.visible = true

func _process(delta):
    if is_test_active:
        update_timer()
        calculate_scores()

func update_timer():
    var elapsed = (Time.get_ticks_msec() - start_time) / 1000.0
    $UI/TimerLabel.text = "–í—Ä–µ–º—è: %.1f" % elapsed
    
    if elapsed >= MAX_TIME:
        end_test("time_up")

func calculate_scores():
    # –û—á–∫–∏ –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
    var speed_score = int(current_car.linear_velocity.length() * SPEED_MULTIPLIER)
    
    # –û—á–∫–∏ –∑–∞ —Å—Ç–∏–ª—å (–¥—Ä–∏—Ñ—Ç, –ø—Ä—ã–∂–∫–∏)
    var style_score = 0
    if current_car.is_drifting():  # –ú–µ—Ç–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ –º–∞—à–∏–Ω—ã
        style_score += 10 * delta
    
    total_score = speed_score + style_score
    update_ui_scores(speed_score, style_score)

func update_ui_scores(speed: int, style: int):
    $UI/ScorePanel/SpeedScore.text = "–°–∫–æ—Ä–æ—Å—Ç—å: %d" % speed
    $UI/ScorePanel/StyleScore.text = "–°—Ç–∏–ª—å: %d" % style
    $UI/ScorePanel/TotalScore.text = "–í—Å–µ–≥–æ: %d" % total_score

func end_test(reason: String):
    is_test_active = false
    $UI/TimerLabel.visible = false
    
    var final_comment = ""
    match reason:
        "time_up":
            final_comment = get_random_comment("fail_time")
        "crashed":
            final_comment = get_random_comment("fail_crash")
    
    $UI/CommentaryLabel.text = final_comment
    award_bananas(total_score)
    show_results_menu()

func get_random_comment(type: String) -> String:
    var comments = {
        "start": [
            "–ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —ç—Ç–∞ –∫–æ—Ä–æ–±–∫–∞ –º–æ–∂–µ—Ç...",
            "–≠—Ç–æ –Ω–µ –º–∞—à–∏–Ω–∞ ‚Äî —ç—Ç–æ —Ç—Ä–∞–≥–µ–¥–∏—è!"
        ],
        "fail_time": [
            "–î–∞–∂–µ —É–ª–∏—Ç–∫–∞ –±—ã—Å—Ç—Ä–µ–µ!",
            "–¢—ã –µ–∑–¥–∏—à—å –∫–∞–∫ –º–æ–π –¥–µ–¥!"
        ]
    }
    return comments[type][randi() % comments[type].size()]

func award_bananas(score: int):
    var bananas = score / 10
    GameState.add_bananas(bananas)
    $UI/CommentaryLabel.text += "\n+%düçå" % bananas
